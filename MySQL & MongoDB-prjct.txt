<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Thymeleaf (For rendering HTML forms) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    <!-- Spring Data MongoDB -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>

    <!-- Spring Boot Starter Test (For testing purposes) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
</dependencies>

spring.data.mongodb.uri=mongodb://localhost:27017/employeedb


package com.example.employee.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "employees")
public class Employee {

    @Id
    private String id;
    private String employeeId;
    private String name;
    private String email;
    private String location;

    // Getters and setters

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(String employeeId) {
        this.employeeId = employeeId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }
}

package com.example.employee.repository;

import com.example.employee.model.Employee;
import org.springframework.data.mongodb.repository.MongoRepository;

public interface EmployeeRepository extends MongoRepository<Employee, String> {
    Employee findByEmployeeId(String employeeId);
}

package com.example.employee.controller;

import com.example.employee.model.Employee;
import com.example.employee.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
public class EmployeeController {

    @Autowired
    private EmployeeRepository employeeRepository;

    // Landing page to display the form
    @GetMapping("/")
    public String showForm() {
        return "index"; // Thymeleaf template to display the form
    }

    // API to save employee data
    @PostMapping("/save")
    public String saveEmployee(Employee employee) {
        employeeRepository.save(employee);
        return "redirect:/"; // Redirect to the form after saving
    }

    // API to display all employees
    @GetMapping("/displayAll")
    public String displayAllEmployees(Model model) {
        List<Employee> employees = employeeRepository.findAll();
        model.addAttribute("employees", employees);
        return "displayAll"; // Thymeleaf template to display all employees
    }

    // API to display a single employee by employee ID
    @GetMapping("/display/{employeeId}")
    public String displayEmployee(@PathVariable String employeeId, Model model) {
        Employee employee = employeeRepository.findByEmployeeId(employeeId);
        model.addAttribute("employee", employee);
        return "displayEmployee"; // Thymeleaf template to display a single employee
    }
}

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Employee Form</title>
</head>
<body>
    <h1>Enter Employee Details</h1>
    <form action="/save" method="post">
        <label for="employeeId">Employee ID:</label>
        <input type="text" name="employeeId" required/><br/>
        <label for="name">Employee Name:</label>
        <input type="text" name="name" required/><br/>
        <label for="email">Employee Email:</label>
        <input type="email" name="email" required/><br/>
        <label for="location">Location:</label>
        <input type="text" name="location" required/><br/>
        <button type="submit">Submit</button>
    </form>
</body>
</html>

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Employee List</title>
</head>
<body>
    <h1>All Employees</h1>
    <table>
        <tr>
            <th>Employee ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Location</th>
        </tr>
        <tr th:each="employee : ${employees}">
            <td th:text="${employee.employeeId}"></td>
            <td th:text="${employee.name}"></td>
            <td th:text="${employee.email}"></td>
            <td th:text="${employee.location}"></td>
        </tr>
    </table>
</body>
</html>

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Employee Details</title>
</head>
<body>
    <h1>Employee Details</h1>
    <div>
        <p><strong>Employee ID:</strong> <span th:text="${employee.employeeId}"></span></p>
        <p><strong>Name:</strong> <span th:text="${employee.name}"></span></p>
        <p><strong>Email:</strong> <span th:text="${employee.email}"></span></p>
        <p><strong>Location:</strong> <span th:text="${employee.location}"></span></p>
    </div>
</body>
</html>











